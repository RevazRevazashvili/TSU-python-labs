LNames = ['აბაშიძე','ანთიძე','არჩვაძე','ახალაია','ბაძაღუა','ბერიანიძე','ბერიშვილი','გვენცაძე','გიგაური','გიორგაძე','გოგალაძე',
          'გოცირიძე','დალაქიშვილი','ვარდიძე','ზარანდია','თადუმაძე','კანკია','კაპანაძე','კასრაძე','კვარაცხელია','კვესელავა',
          'კვინიკაძე','კოპაძე','კორძაია','კუსრაძე','ლაბაძე','ლაცაბიძე','მაისურაძე','მარჯანიძე','მაჩალაძე','მაცაბერიძე','მელია',
          'მეტრეველი','მიქავა','მიქაძე','მოდებაძე','მონიავა'
          ]
GNames = ['ანა','ანუკი','ბარბარე','გვანცა','დიანა','ეკა','ელენე','ვერონიკა','ვიქტორია','თათია','თამარი','თეა','თეკლე', 'თინიკო',
          'იზაბელა','ია','იამზე','ლია','ლიკა','ლანა','ლამზირა','მარიკა','მანანა','მაია','მაკა','მარიამი','ნანა','ნანი','ნატა','ნატო',
          'ნია','ნინო','ნონა','ოლიკო','სალომე','სოფიკო','ქეთევანი','ქრისტინე','შორენა','ხატია']

BNames = ['ალეკო','ალიკა','ამირან','ანდრია','არჩილი','ასლანი','ბაჩუკი','ბექა''გიგა','გიგი','გიორგი','გოგა','დავითი','დათა',
          'ერეკლე','თემური','იაკობ','ილია','ირაკლი','ლადო','ლაშა','მიხეილ','ნიკა','ოთარი','პაატა','რამაზ','რამინი','რატი',
          'რაული','რევაზი','რომა','რომანი','საბა','სანდრო','სერგი','სიმონ','შალვა','შოთა','ცოტნე','ჯაბა','ჯემალ']

Subject = ['კომპიუტერული უნარ-ჩვევები', 'ფიზიკის შესავალი','ქიმიის შესავალი','კალკულუსი II',
           'პროგრამირების საფუძვლები','ობიექტზე ორიენტირებული პროგრამირება: C++','ალგორითმებიI',
           'ალგორითმები II','მონაცემთა სტრუქტურები']
FNames = ''


import random

class students:
    # __slots__ = ['sur', 'name', 'subj', 'deg']

    # კონსტრუქტორი
    def __init__(self, su, n, s, d):
        self.sur = su
        self.name = n
        self.subj = s
        self.deg = d

    def __str__(self):
        return f"student info: {self.sur}, {self.name}, {self.subj}, {self.deg}"

    # ფუნქცია აბრუნებს ატრიბუტს და თუ არ დახვდა ასეთი ატრიბუტი დააბრუნებს შედეგს
    def __getattr__(self, atr):
        return f"object has not attribute {atr} a = {self.a}"

    # ფუნქცია გადაცემულ მნიშვნელობას მიანიჭებს ატრიბუტს
    def __setattr__(self, key, value):
        self.__dict__[key] = value

    def isgreater(self, obj):
        if self.deg > obj.deg:
            return self
        else:
            return obj



studs = []

for i in range(100):
    stud = students(random.choice(LNames), random.choice([random.choice(GNames), random.choice(BNames)]),
                    random.choice(Subject), random.choice(range(100)))
    studs.append(stud)

print(studs[4])
print(studs[69])

print(students.isgreater(studs[4], studs[69]))